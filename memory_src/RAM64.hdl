/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 * 
 * Author: Naga Kandasamy
 * Date created: July 12, 2020

 * Student name(s): Ricky Chen
 * Date modified: October 5, 2024 
 *
 * Notes: Hardware project from the book "The Elements of Computing Systems" by Nisan and Schocken, MIT Press.
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    /* Implementation tip: A larger RAM unit can be built by grouping smaller RAM-parts together.
       Think about the RAMâ€™s address input as consisting of two fields: 
       one field can be used to select a RAM-part;
       the other field can be used to select a register within that RAM-part
       Use mux/demux logic to effect this addressing scheme.
*/
    PARTS:
    // TODO: complete your implementation of RAM64.
    DMux8Way(in=load, sel=address[3..5], a=RAM0, b=RAM1, c=RAM2, d=RAM3, e=RAM4, f=RAM5, g=RAM6, h=RAM7);

    RAM8(in=in[0..15], load=RAM0, address=address[0..2], out=val0);
    RAM8(in=in[0..15], load=RAM1, address=address[0..2], out=val1);
    RAM8(in=in[0..15], load=RAM2, address=address[0..2], out=val2);
    RAM8(in=in[0..15], load=RAM3, address=address[0..2], out=val3);
    RAM8(in=in[0..15], load=RAM4, address=address[0..2], out=val4);
    RAM8(in=in[0..15], load=RAM5, address=address[0..2], out=val5);
    RAM8(in=in[0..15], load=RAM6, address=address[0..2], out=val6);
    RAM8(in=in[0..15], load=RAM7, address=address[0..2], out=val7);

    Mux8Way16(a=val0, b=val1, c=val2, d=val3, e=val4, f=val5, g=val6, h=val7, sel=address[3..5], out=out);
}